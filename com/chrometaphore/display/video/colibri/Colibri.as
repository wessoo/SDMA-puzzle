/**  * Colibri * <br>2010, Lorenzo Buosi * <br>chrometaphore.com * <br>http://www.chrometaphore.com * <br>info@chrometaphore.com * * <br>Released under Creative Commons Attribution-Noncommercial 2.5 * <br>http://creativecommons.org/licenses/by-nc/2.5/it/deed.en_US * * <br>Please read carefully * <br>--------------------------------------------------------------- * <br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * <br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * <br>OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * <br>NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * <br>HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * <br>WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * <br>FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * <br>OTHER DEALINGS IN THE SOFTWARE. */package com.chrometaphore.display.video.colibri{	import flash.display.*;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;	import caurina.transitions.*;	import caurina.transitions.properties.*;	import com.chrometaphore.display.DisplayItem;	import com.chrometaphore.display.preloaders.Twirl;	import com.chrometaphore.display.video.colibri.events.MyVideoEvent;	import com.chrometaphore.display.video.colibri.events.SeekBarEvent;	import flash.net.URLRequest;		public class Colibri extends DisplayItem	{		//colibri version		public static const v:String = "0.4";				//sprites		public var video:MyVideo;		public var bar:Bar;		private var __barHOver:Number = 15;		private var __barHOut:Number  = 5;		public var playButton:PlayBtn;		//public var pauseButton:PauseBtn;		public var preloader:Twirl;		//public var thumb:Loader;		//public var thumbMask:Sprite;				//'original': move to original video size		//'adjust': adjust to the provided dimensions creating margins if needed		private var __resizeMode:String = "adjust";				//vars		private var __status:String    = "";		private var __autoplay:Boolean = false;		private var __w:Number;		private var __h:Number;				private var __temp:Object = {};				//flags		private var __mouseMove:Boolean = false;				//CONSTRUCTORS		//___________________________________________________________________________________				/**		 * colibri constructor.		 * @param         w           player width		 * @param         h           player height		 * @param         streamURL   stream URL		 * @param         autoplay    [optional] autoplay content or not?		 * @param         resizeMode  [optional] set player resize mode. 		 *                            <br>- 'adjust' keep the selected w / h ratio. This is the default setting.		 *                            <br>- 'original' on video meta data set the original video width / height.		 * 		 */		public function Colibri( w:Number, h:Number, streamURL:String, autoplay:Boolean = false, resizeMode = "adjust" ):void		{			__w = w;			__h = h;			__autoplay = autoplay;						switch ( resizeMode )			{				case "adjust":					__resizeMode = resizeMode;				break;				case "original":					__resizeMode = resizeMode;				break;				default:					__resizeMode = "adjust";			}						/*			//thumbnail			thumb = new Loader();			addChild( thumb );						//thumb mask			thumbMask = new Sprite();			thumbMask.graphics.beginFill( 0x000000 );			thumbMask.graphics.drawRect( 0, 0, __w, __h );			thumb.mask = thumbMask;			addChild( thumbMask );			*/						//video			video = new MyVideo( w, h, streamURL );			addChild( video );						//play button			playButton       = new PlayBtn( 50, 50 );			playButton.alpha = 1;			playButton.activate();			playButton.x     = __w / 2; 			playButton.y     = __h / 2;			this.addChild(playButton);						//pause button			/*			pauseButton       = new PauseBtn( 50, 50 );			pauseButton.alpha = 1;			pauseButton.activate();			pauseButton.x     = __w / 2; 			pauseButton.y     = __h / 2;			this.addChild(pauseButton);			*/						//preloader			preloader   = new Twirl();			preloader.x = __w / 2; 			preloader.y = __h / 2;			preloader.loop();			preloader.visible  = false;			addChild(preloader);						//bar			bar   = new Bar( __w, __barHOut );			bar.x = 0;			bar.y = __h - __barHOut;			this.addChild(bar);						__temp.mousex = this.mouseX;			__temp.mousey = this.mouseY;						//listeners			this.addEventListener( MouseEvent.CLICK, onPause );			this.addEventListener( Event.ENTER_FRAME,          onEnterFrame );			video.addEventListener( MyVideoEvent.ON_META_DATA, onVideoMetaData );						playButton.addEventListener( MouseEvent.CLICK, onPlay );						//bar.addEventListener(MouseEvent.MOUSE_OVER,        onBarOver );			//bar.addEventListener(MouseEvent.MOUSE_OUT,         onBarOut );			bar.addEventListener(SeekBarEvent.SEEK,            onBarSeek );						if ( __autoplay )			{		    	play();			}			else			{				pause();			}		}					//PUBLIC		//___________________________________________________________________________________				/**		 * Play video.		 * 		 * @return         void		 */		override public function play():void 		{			if ( __status != "play" )			{				//show bar, if hidden.				bar.open();				bar.over( __barHOver );								playButton.visible = false;								__status = "play";								if ( video.stream.time > 0 && video.stream.time < ( video.duration - 0.5 ) )				{					video.resume();				}				else if ( video.stream.time <= 0 )				{					video.play();				}			}		}				/**		 * Pause video.		 * 		 * @return         void		 */		public function pause():void 		{			if ( __status != "pause" )			{				playButton.visible = true;				__status = "pause";				video.pause();			}		}				/**		 * Resize video width / height.		 *		 * @param          w           [optional] resize player width ( -1 = no resize )		 * @param          h           [optional] resize player height ( -1 = no resize )		 * @return         void		 */		override public function resize( w:Number = -1, h:Number = -1 ):void		{			if ( w != -1 )			{				__w = w;			}						if( h != -1 )			{				__h = h;			}						video.resize( __w, __h );			/*			thumbMask.graphics.clear();			thumbMask.graphics.beginFill( 0x000000 );			thumbMask.graphics.drawRect( 0, 0, __w, __h );			*/			bar.x = 0;			bar.y = __h - __barHOut;			bar.w = __w;						playButton.x  = __w / 2; 			playButton.y  = __h / 2;			//pauseButton.x = __w / 2; 			//pauseButton.y = __h / 2;			preloader.x   = __w / 2; 			preloader.y   = __h / 2;		}				//PRIVATE		//___________________________________________________________________________________				private function checkAreaOver( target:DisplayObject ):Boolean		{			var isOver:Boolean = false;			var scrollAreaBounds:Rectangle = target.getBounds(this);			if ( this.mouseX >= scrollAreaBounds.x       &&				 this.mouseX <= scrollAreaBounds.right   &&				 this.mouseY >= scrollAreaBounds.y       &&				 this.mouseY <= scrollAreaBounds.bottom				 )			{				isOver = true;			}						return isOver;		}				private function barOn():void		{			Tweener.addTween( bar, { y:__h - __barHOut, time:0.5, transition:"easeOut" } );		}		private function barOff():void		{			Tweener.addTween( bar, { y:__h, time:0.5, transition:"easeOut" } );		}		/*		private function overlayButtonOn():void		{			switch ( __status )			{				case "play":					Tweener.addTween( pauseButton, { alpha:1, time:0.5, transition:"easeOut" } );				break;				case "pause":					Tweener.addTween( playButton, { alpha:1, time:0.5, transition:"easeOut" } );				break;			}		}				private function overlayButtonOff():void		{			switch ( __status )			{				case "play":					Tweener.addTween( pauseButton, { alpha:0, time:4, transition:"easeOut" } );				break;				case "pause":					//Tweener.addTween( playButton, { alpha:0, time:4, transition:"easeOut" } );				break;			}		}		*/		private function switchResizeMode( rm:String ):void		{			__resizeMode = rm;						switch ( __resizeMode )			{				case "original":					resize( video.originalVideoWidth, video.originalVideoHeight );				break;				case "adjust":					resize( __w, __h );				break;			}					}						//PROTECTED		//___________________________________________________________________________________				//GETTERS		//___________________________________________________________________________________				public function get resizeMode():String		{			return __resizeMode;		}				//SETTERS		//___________________________________________________________________________________		/*		public function set thumbnail( thumbURL:String ):void		{			thumb.load( new URLRequest( thumbURL ) );		}		*/		//EVENT HANDLERS		//___________________________________________________________________________________				private function onPlay( e:MouseEvent ):void		{			play();			this.removeEventListener( MouseEvent.CLICK, onPlay );			this.addEventListener( MouseEvent.CLICK, onPause );		}				private function onPause( e:MouseEvent ):void		{			if( e.target as Colibri ) {				pause();			}			this.removeEventListener( MouseEvent.CLICK, onPause );			this.addEventListener( MouseEvent.CLICK, onPlay );		}		/*		private function onBarOver( e:MouseEvent ):void		{			bar.over( __barHOver );		}				private function onBarOut( e:MouseEvent ):void		{			bar.out();		}		*/		private function onBarSeek(e:SeekBarEvent ):void		{			var seekTime:Number = video.duration * ( e.data.ratioPoint / 100 );			video.stream.seek(seekTime);		}				private function onVideoMetaData( e:MyVideoEvent ):void		{			switchResizeMode( __resizeMode );		}				private function onEnterFrame( e:Event ):void		{			if ( video.stream.bufferLength < video.stream.bufferTime )			{				if ( __status == "play" )				{					//loading.					preloader.visible  = true;				}				else				{					preloader.visible  = false;				}			}			else			{				//playing.				preloader.visible  = false;				//trace( "bufferLength: " + video.stream.bufferLength );			}						if ( this.mouseX == __temp.mousex || this.mouseY == __temp.mousey )			{				__mouseMove = false;			}			else			{				if ( checkAreaOver(this) )				{						__mouseMove = true;					//update					__temp.mousex = this.mouseX;					__temp.mousey = this.mouseY;				}				else				{					__mouseMove = false;				}			}			/*			if ( __mouseMove )			{				overlayButtonOn();			}			else			{				if ( ! checkAreaOver( pauseButton ) || ! checkAreaOver( playButton ) )				{						overlayButtonOff();				}				else				{					overlayButtonOn();				}			}			*/			if ( __status == "play" )			{				if ( video.duration != -1 )				{					if ( video.stream.time >= ( video.duration - 0.5 ) )					{						//reached the end, set as paused.						pause();						dispatchEvent( new ColibriEvent( "onFinished" ) );					}					else					{						//playing..					}				}			}						//update bar status			bar.updateStatus( video.stream.time, video.duration, video.stream.bufferTime, video.stream.bufferLength );		}        public function destroy():void		{			this.removeEventListener( MouseEvent.CLICK,   onPlay );			this.removeEventListener( MouseEvent.CLICK,   onPause );			this.removeEventListener(  Event.ENTER_FRAME, onEnterFrame );						bar.removeEventListener( SeekBarEvent.SEEK, onBarSeek );						video.removeEventListener( MyVideoEvent.ON_META_DATA, onVideoMetaData );			video.destroy();		}	}}